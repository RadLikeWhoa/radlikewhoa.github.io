{"componentChunkName":"component---src-templates-article-js","path":"/articles/css-data-components","webpackCompilationHash":"dd8f89bc705490318614","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sacha.me"}},"markdownRemark":{"html":"<p>In recent years, CSS architecture has become more and more important when authoring websites. No longer would web developers just throw some selectors around until everything looks the way it should. Instead we think about the architecture of our CSS files and how they help us become more efficient in creating our websites. After the recent redesign of my website, I thought I'd share some thoughts about how I write my CSS components.</p>\n<h3 id=\"basic-principles\"><a href=\"#basic-principles\" aria-label=\"basic principles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic principles</h3>\n<p>The focus of this whole debate lies on creating reusable modules that are decoupled from their content. This way stylesheets become much DRYer and writing HTML documents becomes a lot easier as you can rely on your modules to do much of the heavy lifting.</p>\n<p>This basic principle remains the same throughout all methodologies. However, the execution of those ideas differs. Sometimes components are grouped and prefixed (as in <a href=\"https://smacss.com\" title=\"Scalable and Modular Architecture for CSS\">smacss</a>), sometimes the focus lies on making the structure clearly visible (as in <a href=\"https://bem.info\" title=\"Base Object Modifier\">BEM</a>) and sometimes the architecture just defines the mindset, without giving too much guidelines on writing the CSS (like <a href=\"http://oocss.org\" title=\"Object Oriented CSS\">OOCSS</a>).</p>\n<h3 id=\"the-problem-with-those-approaches\"><a href=\"#the-problem-with-those-approaches\" aria-label=\"the problem with those approaches permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem with those approaches</h3>\n<p>While all these architecture styles have good ideas and do a nice job at guiding CSS authors into the right direction, they all have their downsides. Consider, for example, a button with some different styles, written using the BEM (\"Base, Element, Modifier\") style.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button button--primary button--wide<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button--primary</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button--wide</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem is instantly visible. We end up with three classes. One for the basic button (<code class=\"language-text\">button</code>) and two for its modifiers (<code class=\"language-text\">button--primary button--wide</code>). Using a preprocessor you could extend the base class from within the modifiers, but this is also not a very elegant solution. To solve this exact problem, Glen Maddern and Ben Schwarz came up with <a href=\"http://amcss.github.io\" title=\"Attribute Module CSS\">AMCSS</a>.</p>\n<h3 id=\"attribute-modules\"><a href=\"#attribute-modules\" aria-label=\"attribute modules permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attribute Modules</h3>\n<p>The idea is to use custom attributes on your HTML elements, instead of using classes. On their website, they provide the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Large primary button --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary btn-lg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Large primary button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- becomes --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">am-Button</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>primary large<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Large primary button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This way, you don't have to use a base class as the attribute itself acts as the base. It's also more readable and, in my opinion, easier to write. In your CSS you would use attribute selectors, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[data-button]</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">[data-button~=\"primary\"]</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">[data-button~=\"large\"]</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example uses the tilde-attribute selector. This matches a keyword in a space-separated list. You could also use other attribute selectors, but this way you have a strict format to follow, preventing you from making mistakes.</p>\n<p>As you can see, AMCSS doesn't let you write any less CSS. Instead, the CSS is more efficient and you can see clear benefits in your HTML.</p>\n<p>I follow this style most of the time. However, I'm using standard <code class=\"language-text\">data-*</code> attributes, instead of custom attributes like <code class=\"language-text\">am-button</code>. This allows me to add and remove modifiers through JavaScript more easily.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">link<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> <span class=\"token string\">'primary large'</span></code></pre></div>\n<h3 id=\"an-example-grid-columns\"><a href=\"#an-example-grid-columns\" aria-label=\"an example grid columns permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>An example: grid columns</h3>\n<p>To give you an example of how I use this style I'd like to show you my grid columns. The grid itself is a <code class=\"language-text\">data-grid</code> component, while the columns are <code class=\"language-text\">data-col</code> components. Just including those attributes in an HTML tag is enough, they don't need to have a value.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-grid</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-col</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1-2 M1-4 L1-5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-col</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1-2 M1-4 L1-5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As you can see I'm using a standard grid component (possible modifiers would be <code class=\"language-text\">gutterless</code> or <code class=\"language-text\">rev</code>) wrapping some column components. My setup allows me to define columns for different breakpoints using a custom prefix. No prefix applies to all screens (no media query), 'M' applies to medium screens and 'L' applies to large screens.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[data-col~=\"1-2\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n// ...\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 40em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">[data-col~=\"M1-4\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 60em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">[data-col~=\"L1-5\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I've created a <a href=\"https://github.com/RadLikeWhoa/radlikewhoa.github.io/blob/master/_src/scss/_grid.scss\" title=\"This site&#x27;s source code for grids\">Sass mixin</a> to set up the column components in order to make the whole setup even more flexible.</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>If, like me, you could never really get comfortable with BEM or similar concepts, AMCSS might just be perfect for you. It solves many of the problems other concepts face and it makes writing your HTML much easier and, honestly, even a bit more fun.</p>\n<p>*[DRYer]: Don't repeat yourself</p>","frontmatter":{"date":"11 January 2015","path":"/articles/css-data-components","title":"Using Data Attributes to Write CSS Components"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}