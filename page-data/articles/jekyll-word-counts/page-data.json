{"componentChunkName":"component---src-templates-article-js","path":"/articles/jekyll-word-counts","webpackCompilationHash":"dd8f89bc705490318614","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://sacha.me"}},"markdownRemark":{"html":"<p>Displaying a post's word count is rather common when creating a blog, but usually those techniques rely on JavaScript to work. The script reads the post's text, counts the words and displays the result accordingly. That was the way I did things on this blog first as well, but then I set out to find a better way.</p>\n<p data-block=\"info\">If you just want to get to the snippets without the explanations, they're available in the paragraph <a href=\"#summing-it-up\" title=\"Jump to this paragraph\">Summing it up</a>.</p>\n<h3 id=\"showing-the-word-count\"><a href=\"#showing-the-word-count\" aria-label=\"showing the word count permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Showing the word count</h3>\n<p>Luckily Jekyll provides a handy liquid filter called <code class=\"language-text\">number_of_words</code>. So displaying the actual word count is as simple as that:</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{{ page.content <span class=\"token operator\">|</span> number_of_words }}</code></pre></div>\n<p>While this works just nicely it's not very solid. You might want to hide word counts on shorter posts, for example as they're of little value in such posts. This is a little more complex as you can not directly use Liquid filters in a conditional block.</p>\n<h3 id=\"variables-in-liquid\"><a href=\"#variables-in-liquid\" aria-label=\"variables in liquid permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variables in Liquid</h3>\n<p>In Liquid there are two ways to create variables. You can <code class=\"language-text\">{% assign %}</code> a variable and you can <code class=\"language-text\">{% capture %}</code> a variable. The difference might not be obvious, but it's simple once you get it.</p>\n<p>Assigning a value to a variable means that you take any kind of data (e.g. a string, a number, a boolean) and Liquid knows that you want to access that exact data when you refer to this variable. An assigned variable is fixed, that means you can not use the value returned from other Liquid tags.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">assign</span> awesome <span class=\"token operator\">=</span> true <span class=\"token operator\">%</span>}\n\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> awesome <span class=\"token operator\">%</span>}\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Yay, awesome<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>But what if you want to store a Liquid tags's return value in a variable? That's exactly what the <code class=\"language-text\">{% capture %}</code> block is for. Unlike assigned variables, captured variables can only hold strings â€” which will cause us some trouble later on. This is simply because Liquid tags return strings by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> value <span class=\"token operator\">%</span>}\n  {{ page.title <span class=\"token operator\">|</span> <span class=\"token function\">upcase</span> }} from {{ page.date <span class=\"token operator\">|</span> <span class=\"token function\">date</span><span class=\"token operator\">:</span> \"<span class=\"token operator\">%</span>b <span class=\"token operator\">%</span>d, <span class=\"token operator\">%</span>y\" }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>As you can see in the above example, you can capture any number of strings into a variable, be it strings returned from a Liquid tag or fixed strings.</p>\n<h3 id=\"making-the-word-count-conditional\"><a href=\"#making-the-word-count-conditional\" aria-label=\"making the word count conditional permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making the word count conditional</h3>\n<p>Now that you know about <code class=\"language-text\">{% assign %}</code> and <code class=\"language-text\">{% capture %}</code> we can move on to store our word count in a variable. The question remains, do we assign the variable or do we capture it?</p>\n<p>It should be clear by now that we'll have to capture the value as it's returned from a Liquid tag. That gives us something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>Let's say we considered posts that are shorter than 250 words not worthy of getting the word count. A good example for this would be 'link list'-style post that consist of mostly a quote from the original article and a comment spanning a sentence or two. Ideally, this would be taken care of using a simple conditional block.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> words <span class=\"token operator\">></span> <span class=\"token number\">250</span> <span class=\"token operator\">%</span>}\n  {{ words }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>But you'll soon see that this won't work as intended as Jekyll will throw you this error an error saying you've attempted to compare a string (the words) with a number (250), which is entirely true, and also, sadly, entirely not possible. There is, however, a simple workaround.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words <span class=\"token operator\">|</span> <span class=\"token function\">minus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> words contains \"<span class=\"token operator\">-</span>\" <span class=\"token operator\">%</span>}\n  {{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>You can use Liquid filters to substract your minimum number from the word count to see if it falls below 0. If it does it will contain a '-' at the beginning, which means the post is too short and won't get the word number displayed. If our variable doesn't contain a '-' we can simply add our minimum number back to the word count and display it. Quite simple, right?</p>\n<h3 id=\"customising-the-output\"><a href=\"#customising-the-output\" aria-label=\"customising the output permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Customising the output</h3>\n<p>Now that we finally have our word number along with the conditional to hide it from short posts we can move on to make the output a bit nicer. You do this using Liquid filters like <code class=\"language-text\">append</code> or <code class=\"language-text\">prepend</code>. For a complete list of available filters you can check Shopify's <a href=\"https://github.com/Shopify/liquid/wiki/Liquid-for-Designers#standard-filters\" title=\"Shopify&#x27;s guide for Liquid\">Liquid for Designers guide</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" words\" }}</code></pre></div>\n<p>The above snippet results in something like <em>'There are 250 words in this post'</em>. You can go crazy with filters, they offer lots of possibilities.</p>\n<h3 id=\"calculating-the-reading-time\"><a href=\"#calculating-the-reading-time\" aria-label=\"calculating the reading time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calculating the reading time</h3>\n<p>You might have noticed that I display an estimated reading time on this blog instead of just a word count. Personally, I just think this is a more useful guideline. Doing this is as easy as putting the <code class=\"language-text\">divided_by</code> filter into our final word count construct. The number to divide by is arbitrary, but 180 is the avarage number of words a person reads per minute.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">divided_by</span><span class=\"token operator\">:</span> <span class=\"token number\">180</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" minutes to read\" }}</code></pre></div>\n<h3 id=\"summing-it-up\"><a href=\"#summing-it-up\" aria-label=\"summing it up permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summing it up</h3>\n<p>Instead of making you pick up all the pieces scattered all over this post, here are the two snippets to display the word count and the reading time.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words <span class=\"token operator\">|</span> <span class=\"token function\">minus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> words contains \"<span class=\"token operator\">-</span>\" <span class=\"token operator\">%</span>}\n  {{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" words\" }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words <span class=\"token operator\">|</span> <span class=\"token function\">minus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> words contains \"<span class=\"token operator\">-</span>\" <span class=\"token operator\">%</span>}\n  {{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">divided_by</span><span class=\"token operator\">:</span> <span class=\"token number\">180</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" minute read\" }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}</code></pre></div>","frontmatter":{"date":"09 October 2013","path":"/articles/jekyll-word-counts","title":"Word Counts and Reading Time in Jekyll"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}