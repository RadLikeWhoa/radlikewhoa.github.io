{"data":{"site":{"siteMetadata":{"title":"Sacha Schmid","description":"Sacha Schmid is a front-end developer from Switzerland, designing and building websites and applications."}},"allMarkdownRemark":{"edges":[{"node":{"html":"<style>\n\t.demo-wrapper {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\theight: 15em;\n\t\tpadding: 1.5em;\n\t\tmargin-bottom: 1.5em;\n\t}\n\n  .demo-element {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tmax-width: 15em;\n\t\tcolor: #fff;\n\t\ttext-align: center;\n\t\tborder-radius: 3px;\n\t\tbox-shadow: 0 2px 4px rgba(51, 51, 51, 0.25);\n\t\toverflow: hidden;\n\t}\n\n\t.demo-element p {\n\t\tmargin: 1.5em;\n\t}\n\n\t.demo-auto {\n\t\tbackground-color: #4cadeb;\n\t\tanimation: height-auto 3s ease-in-out infinite both alternate;\n\t}\n\n\t.demo-max {\n\t\tbackground-color: #eb894c;\n\t\tanimation: height-max 3s ease-in-out infinite both alternate;\n\t}\n\n\t@keyframes height-auto {\n\t\t0% {\n\t\t\theight: 0;\n\t\t}\n\n\t\t100% {\n\t\t\theight: auto;\n\t\t}\n\t}\n\n\t@keyframes height-max {\n\t\t0% {\n\t\t\tmax-height: 0;\n\t\t}\n\n\t\t100% {\n\t\t\tmax-height: 15em;\n\t\t}\n\t}\n</style>\n<p>Very often, applications rely on some kind of slide effect when toggling an element. This is quite common with things like accordions, where clicking on a heading toggles the following section open and closes all other sections. There you expect the opening section to start with a height of 0, and then expand to its full height. This state transformation is usually handled with a quick transition of the <code class=\"language-text\">height</code> property, in order to make the change less jarring to the user.</p>\n<p>This all works fine when all sections have the same height. Then you can directly transition from <code class=\"language-text\">height: 0;</code> to <code class=\"language-text\">height: xy;</code>. If you don't know the sections height in advance, you might be tempted to transition to <code class=\"language-text\">height: auto;</code>, which doesn't really work.</p>\n<div class=\"demo-wrapper\">\n\t<div class=\"demo-element demo-auto\"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at purus consequat, fringilla turpis vel, blandit mi.</p></div>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> height-auto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above example uses the <code class=\"language-text\">height-auto</code> animation. Clearly, no animation is happening. This is due to the fact that browsers can't handle the <code class=\"language-text\">auto</code> value. Now, the trick is to forget about <code class=\"language-text\">height</code> altogether, and instead focus on <code class=\"language-text\">max-height</code>.</p>\n<div class=\"demo-wrapper\">\n\t<div class=\"demo-element demo-max\"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at purus consequat, fringilla turpis vel, blandit mi.</p></div>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> height-max</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 15em<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above example uses the <code class=\"language-text\">height-max</code> animation. Immediately, you'll notice that the box is now animated, yay! We don't need to know the element's actual height in advance, all we need is an estimate as to what the height could be.</p>\n<p>What you want to do is animate to a <code class=\"language-text\">max-height</code> that you expect to be larger than your element. Of course, this involves a bit of guessing, but in many cases you'll be able to make those guesses pretty accurately. This way, you can handle multiple different elements and still have all of them take up just the space they need.</p>","excerpt":"Very often, applications rely on some kind of slide effect when toggling an element. This is quite common with things like accordions, where clicking on a heading toggles the following section open and closes all other sections. There you expect the…","frontmatter":{"date":"18.10.2017","title":"Quick Tip: Animating height: auto;","path":"/articles/height-animation","teaser":"By default, height: auto; value cannot be used in CSS transitions or animations. However, there is a trick to getting it working."}}},{"node":{"html":"<p>JSONP is a way to share data between different domains. As the name suggests, it stems from JSON (\"JavaScript Object Notation\"), but with a wrapper around it (called \"padding\").</p>\n<p>Now, you might be wondering what's wrong with using plain JSON. Most browsers follow the so-called <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" title=\"Same-origin policy on MDN\">same-origin policy</a> which prevents websites from accessing files from other domains unless that permission is explicitly granted through <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"CORS on Wikipedia\">CORS</a>. The only part of a website that isn't subject to this is the script tag.</p>\n<p>Knowing that we can use this trick to get around the same origin policy we can embed a script file served from a different domain containing something a little like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://example.com/people/1234?callback=awesome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">awesome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Job\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What exactly have we done here? We've added a script tag with its source set to a JSON resource on a different domain. But in the src-attribute we specify a callback parameter—<code class=\"language-text\">callback=</code>, sometimes also <code class=\"language-text\">jsonp=</code>—which you'll notice again in the actual response. This is the \"P\" in JSONP, the padding. Ideally, the callback you specify should exist before requesting the external resource.</p>\n<p>To sum it up, a JSONP script calls a function with the data you've requested as the only argument.</p>\n<h3 id=\"but-i-want-an-easy-to-use-function\"><a href=\"#but-i-want-an-easy-to-use-function\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>But I want an easy-to-use function!</h3>\n<p>It can be very much cumbersome to always go through the following steps:</p>\n<ol>\n<li>Define a callback function that will receive the data later on.</li>\n<li>Add the script tag to request the data.</li>\n<li>Clean up?</li>\n</ol>\n<p>That's why libraries like jQuery have <a href=\"http://api.jquery.com/jQuery.getJSON/\" title=\"jQuery&#x27;s getJSON function\">made it easy</a> to request JSONP data. Note the callback parameter. This tells jQuery that it should perform a JSONP request, otherwise you'd get an error because it would try to perform an AJAX request.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/people/1234?callback=?'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But in the end it's pretty easy to define such a function to properly understand it. So let's do just that. Don't worry, I'll walk you through it step by step in just a second.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> _callbacks <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">jsonp</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'jsonp_cb_'</span> <span class=\"token operator\">+</span> _callbacks<span class=\"token punctuation\">,</span>\n        existing <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>scripts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\n\n    script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'&amp;'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'callback='</span> <span class=\"token operator\">+</span> id\n    existing<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> existing<span class=\"token punctuation\">)</span>\n\n    window<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      script<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    _callbacks <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This piece of code adds a <code class=\"language-text\">jsonp</code> function to the <code class=\"language-text\">window</code> that accepts the url you want to send a request to and a callback to exectue once this request has finished. The callback you specify is attached to the window so the requested script has no problem finding and calling it. After the callback has finished, both the external resource and the <code class=\"language-text\">window</code>'s newly attached callback function will be removed.</p>\n<p>First off, we wrap everything in an <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" title=\"Ben Alman on IIFE\">immediately-invoked function expression</a> so we can mind our own business without interfering with any other scripts on the page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next we'll take care of the ID. We need a unique identifier to name our callback so we don't clash with any other callbacks. We use the <code class=\"language-text\">_callbacks</code> variable to store a simple number which we'll increment with every function call.</p>\n<p>In the actual <code class=\"language-text\">jsonp</code> function we set up our variables first.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'jsonp_cb_'</span> <span class=\"token operator\">+</span> _callbacks<span class=\"token punctuation\">,</span>\n    existing <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">id</code> holds the string \"jsonp<em>cb</em>\" joined with our previously defined number because, as you might know, variables in JavaScript must not start with a number. Also, just the number might not be so unique after all. The next two variables are references to the first script on the page (<code class=\"language-text\">existing</code>) which we'll use insert our new script (<code class=\"language-text\">script</code>).</p>\n<p>After setting all our variables we'll have to build up the scripts source and actually insert it into the page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'&amp;'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'callback='</span> <span class=\"token operator\">+</span> id\nexisting<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> existing<span class=\"token punctuation\">)</span></code></pre></div>\n<p>When setting the src-attribute we check if it contains a question mark already. If it does we'll have to add the callback parameter preceded by an ampersand, otherwise preceded by a question mark. This is simply how query strings are handled. The callback parameter is set to a function with the unique name we have stored in our ID. You'll see this function in a second.</p>\n<p>Inserting a DOM node isn't the prettiest thing in JavaScript, but it's easy. We'll insert the newly created script right before the first existing script. To do that, we'll have to access the existing script's parent—usually the <code class=\"language-text\">&lt;head&gt;</code> or the <code class=\"language-text\">&lt;body&gt;</code>—and call the <code class=\"language-text\">insertBefore</code> method on it. This method receives the new DOM node to be insterted and the node it should be insterted before.</p>\n<p>At this point we'll have to attach the callback function to the window.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  script<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You might be suprised that this is not the function you actually define when calling <code class=\"language-text\">jsonp</code>. This is because this function also handles the cleaning up for you. First it removes the requested script from the page, then it calls your callback from the function call and at the end it will remove itself from the window. That means that there are no unnecessary traces left from your request and you can handle the data however you want.</p>\n<p>(Note: Deleting a property on the window might cause errors in older browsers. There are <a href=\"http://stackoverflow.com/questions/1073414/deleting-a-window-property-in-ie\" title=\"Solution for the delete property bug in older browsers\">easy ways</a> around this though.)</p>\n<p>As a last step we have to increase the ID. Now we can be sure that our request will work out just fine and everything will be cleaned up. But is it too early to party?</p>\n<h3 id=\"even-jsonp-has-downsides\"><a href=\"#even-jsonp-has-downsides\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Even JSONP has downsides</h3>\n<p>JSONP has downsides. Some pretty major downsides, even. First off, there is no proper error handling. As there are no status codes and no response codes sent, you'll have to hope for the best to happen. And there is more than one place where things can go wrong.</p>\n<p>The url you requested can be outdated or simply contain a typo. The <code class=\"language-text\">jsonp</code> function has no way to know about this as it just insterts a script onto the page. But even if the request is successful you'll have to check if the data returned is correct and there is no standardised way to do this. Some APIs offer error messages, some don't. And usually, no two API providers structure their content the same way.</p>\n<p>As with every other technology, security concerns are raised, but with JSONP, the concerns have a valid point. A script requested through JSONP can hold any JavaScript. There is no globally accepted specification that forces a specific format. That means your requested file can happily execute whatever it wants to and you probably won't even notice it. There are <a href=\"http://json-p.org\" title=\"Proposal for safer JSONP\">proposals for a safer solution</a>, but they have yet to be enforced.</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>There's not too much of a conclusion to draw here. Use JSONP if you want to use an API that doesn't support CORS. Don't use JSONP if you're too concerned about security issues or want proper error handling.</p>\n<p>Note that, while this function is rather robust and works in most situations, some APIs don't use <code class=\"language-text\">callback</code> for the parameter name. If that's the case, just change the line in the function.</p>","excerpt":"JSONP is a way to share data between different domains. As the name suggests, it stems from JSON (\"JavaScript Object Notation\"), but with a wrapper around it (called \"padding\"). Now, you might be wondering what's wrong with using plain JSON. Most…","frontmatter":{"date":"30.05.2015","title":"Creating a JSONP Function","path":"/articles/jsonp","teaser":"When dealing with APIs, JSONP is all the rage these days. There is a number of reasons as to why this specification reached such popularity, but there's also a lot of uncertainity when it comes to actually using it. Most people would be all like 'Ugh, JSONP is easy, just use jQuery!' But as usual, 'just use jQuery' is not an acceptable answer for everyone."}}},{"node":{"html":"<p data-block=\"info\">You can now use Rouge in combination with Jekyll on GitHub pages natively. See <a href=\"#using-rouge-in-jekyll-3-on-github-pages\">the last section</a> of this article for more details.</p>\n<p>Code, no matter what language it is in, can be complicated to read. That's why many blogs use syntax highlighting on their code blocks to help their readers better understand the displayed code.</p>\n<p>Jekyll was created with this in mind so it offers easy integration with tools like <a href=\"http://pygments.org\" title=\"Pygments&#x27; project page\">Pygments</a> to automatically highlight all code blocks in your posts. However, Pygments is written in Python, while Jekyll is written in Ruby. Because of this a <a href=\"https://github.com/tmm1/pygments.rb\" title=\"Pygments.rb on GitHub\">Ruby wrapper</a> for the Python tool is needed, slowing builds down significantly.</p>\n<p>Because of this, developers have come up with alternatives. One of those is called <a href=\"https://github.com/jneen/rouge\" title=\"Rouge on GitHub\">Rouge</a> and in this post I will show you how you can (and why you should) integrate Rouge into your Jekyll setup.</p>\n<h3 id=\"benefits-of-using-rouge\"><a href=\"#benefits-of-using-rouge\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benefits of using Rouge</h3>\n<p>First of all, it's a lot cleaner to use a Ruby-based syntax highlighter in a Ruby-based setup. You eliminate the need to spawn Python processes right away, which reduces your build time considerably.</p>\n<p>At this point you might think of <a href=\"http://coderay.rubychan.de\" title=\"CodeRay&#x27;s project page\">CodeRay</a>, another Ruby-based syntax highlighter. You could also use that, but Rouge comes with support for all Pygments themes, making it easier to discover new styles for your code blocks. Also, Rouge is just a little bit faster.</p>\n<p>On my admittedly small site, a standard <code class=\"language-text\">jekyll build</code> command took about 28 seconds to complete. Using CodeRay, the build time reduced to 18 seconds, while using Rouge cut the build time by another 2 seconds down to 16 seconds. A total saving of about <strong>40%</strong> is amazing, especially when you want to preview your posts regularly while you're writing them.</p>\n<h3 id=\"installing-rouge\"><a href=\"#installing-rouge\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Rouge</h3>\n<p>The easiest way to use Rouge is using the <a href=\"http://kramdown.gettalong.org\" title=\"kramdown&#x27;s project page\">kramdown</a> markdown parser. They recently added native support for Rouge and Jekyll has been supporting kramdown for a while now.</p>\n<p>First, make sure you're using a recent version of Jekyll (for example <strong>2.5.0</strong>). You can check your installed version using <code class=\"language-text\">jekyll -v</code>. Next up, you need to install kramdown and Rouge.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gem <span class=\"token function\">install</span> kramdown rouge</code></pre></div>\n<p>If you already have a version of kramdown on your machine, make sure it's at least on version <strong>1.5.0</strong>. If you've followed these steps so far you're now ready to use kramdown and Rouge within your Jekyll setup.</p>\n<p>By the way, if, like me, you're always getting errors doing anything with Rouge, remember <em>it's called Rouge, not Rogue</em>.</p>\n<h3 id=\"using-rouge-with-jekyll\"><a href=\"#using-rouge-with-jekyll\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Rouge with Jekyll</h3>\n<p>As with all options concerning your builds, the place to add them is in your <code class=\"language-text\">_config.yml</code>. You might have an entry like <code class=\"language-text\">highlighter: pygments</code> in there, make sure to remove that. In my site's configuration I'm using the following options:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span> kramdown\n\n<span class=\"token key atrule\">kramdown</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">input</span><span class=\"token punctuation\">:</span> GFM\n  <span class=\"token key atrule\">syntax_highlighter</span><span class=\"token punctuation\">:</span> rouge</code></pre></div>\n<p>This tells Jekyll to use kramdown when parsing markdown files and to pass the two settings to kramdown whenever it's run. <code class=\"language-text\">input: GFM</code> allows me to use the same syntax for markdown files I'd use on GitHub, which is especially useful for code blocks. You can now write code blocks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">`​`` html\n<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span>\"#\"<span class=\"token operator\">></span>Hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n`​``</code></pre></div>\n<p>Note the <code class=\"language-text\">html</code> after the first pair of triple backticks (`). This tells Rouge what language to use for the code block. You can view all supported languages with samples on <a href=\"http://rouge.jayferd.us/demo\" title=\"Rouge language demos\">Rouge's demo site</a>.</p>\n<p>Rouge adds classes to your code blocks, allowing you to style parts of your code from a stylesheet. Rouge has the added benefit of being compatible with stylesheets created for Pygments (of which there are <em><a href=\"https://github.com/search?q=pygments+style\" title=\"Find new Pygments themes\">lots</a></em>).</p>\n<p>The only drawback for now is that kramdown only lets you define the standard language to use for your code blocks, all other options are not yet supported. This also means that line numbers are not yet supported. If you absolutely want that feature, you'll have to wait for a little while.</p>\n<h3 id=\"using-rouge-in-jekyll-3-on-github-pages\"><a href=\"#using-rouge-in-jekyll-3-on-github-pages\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Rouge in Jekyll 3 on GitHub Pages</h3>\n<p>Ever since GitHub pages have upgraded Jekyll to version 3 you can use Rouge as your default syntax highlighter. Enabling it is as easy as including the following two lines in your <code class=\"language-text\">_config.yml</code>. In fact, GitHub will even send you a warning if you're trying to use anything other than Rouge.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span> kramdown\n<span class=\"token key atrule\">highlighter</span><span class=\"token punctuation\">:</span> rouge</code></pre></div>\n<p>This gives you both the performance benefits from using a Ruby-based syntax highlighter, while also allowing you to include your code blocks using the GitHub Flavored Markdown syntax.</p>","excerpt":"Code, no matter what language it is in, can be complicated to read. That's why many blogs use syntax highlighting on their code blocks to help their readers better understand the displayed code. Jekyll was created with this in mind so it offers easy…","frontmatter":{"date":"15.01.2015","title":"Syntax Highlighting in Jekyll With Rouge","path":"/articles/jekyll-rouge","teaser":"Many blogs on the web are centred around code so syntax highlighting in code blocks is useful to help readers better understand the displayed code. Jekyll offers easy ways to integrate highlighting into the build chain, for example using Rouge."}}},{"node":{"html":"<p>In recent years, CSS architecture has become more and more important when authoring websites. No longer would web developers just throw some selectors around until everything looks the way it should. Instead we think about the architecture of our CSS files and how they help us become more efficient in creating our websites. After the recent redesign of my website, I thought I'd share some thoughts about how I write my CSS components.</p>\n<h3 id=\"basic-principles\"><a href=\"#basic-principles\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic principles</h3>\n<p>The focus of this whole debate lies on creating reusable modules that are decoupled from their content. This way stylesheets become much DRYer and writing HTML documents becomes a lot easier as you can rely on your modules to do much of the heavy lifting.</p>\n<p>This basic principle remains the same throughout all methodologies. However, the execution of those ideas differs. Sometimes components are grouped and prefixed (as in <a href=\"https://smacss.com\" title=\"Scalable and Modular Architecture for CSS\">smacss</a>), sometimes the focus lies on making the structure clearly visible (as in <a href=\"https://bem.info\" title=\"Base Object Modifier\">BEM</a>) and sometimes the architecture just defines the mindset, without giving too much guidelines on writing the CSS (like <a href=\"http://oocss.org\" title=\"Object Oriented CSS\">OOCSS</a>).</p>\n<h3 id=\"the-problem-with-those-approaches\"><a href=\"#the-problem-with-those-approaches\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem with those approaches</h3>\n<p>While all these architecture styles have good ideas and do a nice job at guiding CSS authors into the right direction, they all have their downsides. Consider, for example, a button with some different styles, written using the BEM (\"Base, Element, Modifier\") style.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button button--primary button--wide<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button--primary</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button--wide</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem is instantly visible. We end up with three classes. One for the basic button (<code class=\"language-text\">button</code>) and two for its modifiers (<code class=\"language-text\">button--primary button--wide</code>). Using a preprocessor you could extend the base class from within the modifiers, but this is also not a very elegant solution. To solve this exact problem, Glen Maddern and Ben Schwarz came up with <a href=\"http://amcss.github.io\" title=\"Attribute Module CSS\">AMCSS</a>.</p>\n<h3 id=\"attribute-modules\"><a href=\"#attribute-modules\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attribute Modules</h3>\n<p>The idea is to use custom attributes on your HTML elements, instead of using classes. On their website, they provide the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Large primary button --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary btn-lg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Large primary button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- becomes --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">am-Button</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>primary large<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Large primary button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This way, you don't have to use a base class as the attribute itself acts as the base. It's also more readable and, in my opinion, easier to write. In your CSS you would use attribute selectors, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[data-button]</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">[data-button~=\"primary\"]</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">[data-button~=\"large\"]</span> <span class=\"token punctuation\">{</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example uses the tilde-attribute selector. This matches a keyword in a space-separated list. You could also use other attribute selectors, but this way you have a strict format to follow, preventing you from making mistakes.</p>\n<p>As you can see, AMCSS doesn't let you write any less CSS. Instead, the CSS is more efficient and you can see clear benefits in your HTML.</p>\n<p>I follow this style most of the time. However, I'm using standard <code class=\"language-text\">data-*</code> attributes, instead of custom attributes like <code class=\"language-text\">am-button</code>. This allows me to add and remove modifiers through JavaScript more easily.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">link<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> <span class=\"token string\">'primary large'</span></code></pre></div>\n<h3 id=\"an-example-grid-columns\"><a href=\"#an-example-grid-columns\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>An example: grid columns</h3>\n<p>To give you an example of how I use this style I'd like to show you my grid columns. The grid itself is a <code class=\"language-text\">data-grid</code> component, while the columns are <code class=\"language-text\">data-col</code> components. Just including those attributes in an HTML tag is enough, they don't need to have a value.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-grid</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-col</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1-2 M1-4 L1-5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-col</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1-2 M1-4 L1-5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As you can see I'm using a standard grid component (possible modifiers would be <code class=\"language-text\">gutterless</code> or <code class=\"language-text\">rev</code>) wrapping some column components. My setup allows me to define columns for different breakpoints using a custom prefix. No prefix applies to all screens (no media query), 'M' applies to medium screens and 'L' applies to large screens.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[data-col~=\"1-2\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n// ...\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 40em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">[data-col~=\"M1-4\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  // ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 60em<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">[data-col~=\"L1-5\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I've created a <a href=\"https://github.com/RadLikeWhoa/radlikewhoa.github.io/blob/master/_src/scss/_grid.scss\" title=\"This site&#x27;s source code for grids\">Sass mixin</a> to set up the column components in order to make the whole setup even more flexible.</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>If, like me, you could never really get comfortable with BEM or similar concepts, AMCSS might just be perfect for you. It solves many of the problems other concepts face and it makes writing your HTML much easier and, honestly, even a bit more fun.</p>\n<p>*[DRYer]: Don't repeat yourself</p>","excerpt":"In recent years, CSS architecture has become more and more important when authoring websites. No longer would web developers just throw some selectors around until everything looks the way it should. Instead we think about the architecture of our CSS…","frontmatter":{"date":"11.01.2015","title":"Using Data Attributes to Write CSS Components","path":"/articles/css-data-components","teaser":"With BEM, SMACSS, OOCSS and other methodologies for CSS architecture there's been a lot of debating around which method is better than the others. AMCSS is a new contender for the throne and in this post I will outline how I'm using it to write CSS components."}}},{"node":{"html":"<p>Displaying a post's word count is rather common when creating a blog, but usually those techniques rely on JavaScript to work. The script reads the post's text, counts the words and displays the result accordingly. That was the way I did things on this blog first as well, but then I set out to find a better way.</p>\n<p data-block=\"info\">If you just want to get to the snippets without the explanations, they're available in the paragraph <a href=\"#summing-it-up\" title=\"Jump to this paragraph\">Summing it up</a>.</p>\n<h3 id=\"showing-the-word-count\"><a href=\"#showing-the-word-count\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Showing the word count</h3>\n<p>Luckily Jekyll provides a handy liquid filter called <code class=\"language-text\">number_of_words</code>. So displaying the actual word count is as simple as that:</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{{ page.content <span class=\"token operator\">|</span> number_of_words }}</code></pre></div>\n<p>While this works just nicely it's not very solid. You might want to hide word counts on shorter posts, for example as they're of little value in such posts. This is a little more complex as you can not directly use Liquid filters in a conditional block.</p>\n<h3 id=\"variables-in-liquid\"><a href=\"#variables-in-liquid\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variables in Liquid</h3>\n<p>In Liquid there are two ways to create variables. You can <code class=\"language-text\">{% assign %}</code> a variable and you can <code class=\"language-text\">{% capture %}</code> a variable. The difference might not be obvious, but it's simple once you get it.</p>\n<p>Assigning a value to a variable means that you take any kind of data (e.g. a string, a number, a boolean) and Liquid knows that you want to access that exact data when you refer to this variable. An assigned variable is fixed, that means you can not use the value returned from other Liquid tags.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">assign</span> awesome <span class=\"token operator\">=</span> true <span class=\"token operator\">%</span>}\n\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> awesome <span class=\"token operator\">%</span>}\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Yay, awesome<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>But what if you want to store a Liquid tags's return value in a variable? That's exactly what the <code class=\"language-text\">{% capture %}</code> block is for. Unlike assigned variables, captured variables can only hold strings — which will cause us some trouble later on. This is simply because Liquid tags return strings by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> value <span class=\"token operator\">%</span>}\n  {{ page.title <span class=\"token operator\">|</span> <span class=\"token function\">upcase</span> }} from {{ page.date <span class=\"token operator\">|</span> <span class=\"token function\">date</span><span class=\"token operator\">:</span> \"<span class=\"token operator\">%</span>b <span class=\"token operator\">%</span>d, <span class=\"token operator\">%</span>y\" }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>As you can see in the above example, you can capture any number of strings into a variable, be it strings returned from a Liquid tag or fixed strings.</p>\n<h3 id=\"making-the-word-count-conditional\"><a href=\"#making-the-word-count-conditional\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making the word count conditional</h3>\n<p>Now that you know about <code class=\"language-text\">{% assign %}</code> and <code class=\"language-text\">{% capture %}</code> we can move on to store our word count in a variable. The question remains, do we assign the variable or do we capture it?</p>\n<p>It should be clear by now that we'll have to capture the value as it's returned from a Liquid tag. That gives us something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>Let's say we considered posts that are shorter than 250 words not worthy of getting the word count. A good example for this would be 'link list'-style post that consist of mostly a quote from the original article and a comment spanning a sentence or two. Ideally, this would be taken care of using a simple conditional block.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> words <span class=\"token operator\">></span> <span class=\"token number\">250</span> <span class=\"token operator\">%</span>}\n  {{ words }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>But you'll soon see that this won't work as intended as Jekyll will throw you this error an error saying you've attempted to compare a string (the words) with a number (250), which is entirely true, and also, sadly, entirely not possible. There is, however, a simple workaround.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words <span class=\"token operator\">|</span> <span class=\"token function\">minus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> words contains \"<span class=\"token operator\">-</span>\" <span class=\"token operator\">%</span>}\n  {{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>You can use Liquid filters to substract your minimum number from the word count to see if it falls below 0. If it does it will contain a '-' at the beginning, which means the post is too short and won't get the word number displayed. If our variable doesn't contain a '-' we can simply add our minimum number back to the word count and display it. Quite simple, right?</p>\n<h3 id=\"customising-the-output\"><a href=\"#customising-the-output\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Customising the output</h3>\n<p>Now that we finally have our word number along with the conditional to hide it from short posts we can move on to make the output a bit nicer. You do this using Liquid filters like <code class=\"language-text\">append</code> or <code class=\"language-text\">prepend</code>. For a complete list of available filters you can check Shopify's <a href=\"https://github.com/Shopify/liquid/wiki/Liquid-for-Designers#standard-filters\" title=\"Shopify&#x27;s guide for Liquid\">Liquid for Designers guide</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" words\" }}</code></pre></div>\n<p>The above snippet results in something like <em>'There are 250 words in this post'</em>. You can go crazy with filters, they offer lots of possibilities.</p>\n<h3 id=\"calculating-the-reading-time\"><a href=\"#calculating-the-reading-time\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calculating the reading time</h3>\n<p>You might have noticed that I display an estimated reading time on this blog instead of just a word count. Personally, I just think this is a more useful guideline. Doing this is as easy as putting the <code class=\"language-text\">divided_by</code> filter into our final word count construct. The number to divide by is arbitrary, but 180 is the avarage number of words a person reads per minute.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">divided_by</span><span class=\"token operator\">:</span> <span class=\"token number\">180</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" minutes to read\" }}</code></pre></div>\n<h3 id=\"summing-it-up\"><a href=\"#summing-it-up\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summing it up</h3>\n<p>Instead of making you pick up all the pieces scattered all over this post, here are the two snippets to display the word count and the reading time.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words <span class=\"token operator\">|</span> <span class=\"token function\">minus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> words contains \"<span class=\"token operator\">-</span>\" <span class=\"token operator\">%</span>}\n  {{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" words\" }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">capture</span> words <span class=\"token operator\">%</span>}\n  {{ page.content <span class=\"token operator\">|</span> number_of_words <span class=\"token operator\">|</span> <span class=\"token function\">minus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endcapture</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> words contains \"<span class=\"token operator\">-</span>\" <span class=\"token operator\">%</span>}\n  {{ words <span class=\"token operator\">|</span> <span class=\"token function\">plus</span><span class=\"token operator\">:</span> <span class=\"token number\">250</span> <span class=\"token operator\">|</span> <span class=\"token function\">divided_by</span><span class=\"token operator\">:</span> <span class=\"token number\">180</span> <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> \" minute read\" }}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}</code></pre></div>","excerpt":"Displaying a post's word count is rather common when creating a blog, but usually those techniques rely on JavaScript to work. The script reads the post's text, counts the words and displays the result accordingly. That was the way I did things on…","frontmatter":{"date":"09.10.2013","title":"Word Counts and Reading Time in Jekyll","path":"/articles/jekyll-word-counts","teaser":"Jekyll makes it easy to display a post's word count or its reading time using no JavaScript whatsoever."}}}]}},"pageContext":{}}